// <auto-generated />
using System;
using Login.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Login.Migrations
{
    [DbContext(typeof(EcomContext))]
    partial class EcomContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Login.Models.EcomCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("Category_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("ECom_Category");
                });

            modelBuilder.Entity("Login.Models.EcomCustomers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Customer_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnName("Customer_Address")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("CustomerEmailId")
                        .IsRequired()
                        .HasColumnName("Customer_Email_Id")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnName("Customer_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnName("Customer_Phone_Number")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("LoginId")
                        .HasColumnName("Login_Id")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("LoginId");

                    b.ToTable("ECom_Customers");
                });

            modelBuilder.Entity("Login.Models.EcomLogin", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Login_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnName("Date_Time_Stamp")
                        .HasColumnType("datetime");

                    b.Property<string>("LoginRole")
                        .IsRequired()
                        .HasColumnName("Login_Role")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.HasIndex("LoginId")
                        .IsUnique()
                        .HasName("Login_Id");

                    b.ToTable("ECom_Login");
                });

            modelBuilder.Entity("Login.Models.EcomOrders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Order_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnName("Order_Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("OrderQuantity")
                        .HasColumnName("Order_Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("Product_Id")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentAddress")
                        .IsRequired()
                        .HasColumnName("Shipment_Address")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ECom_Orders");
                });

            modelBuilder.Entity("Login.Models.EcomPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Payment_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CardCvv")
                        .HasColumnName("Card_CVV")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CardExpiry")
                        .HasColumnName("Card_Expiry")
                        .HasColumnType("date");

                    b.Property<string>("CardName")
                        .HasColumnName("Card_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CardNumber")
                        .HasColumnName("Card_Number")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_Id")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnName("Order_Id")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnName("Payment_Mode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("ECom_Payment");
                });

            modelBuilder.Entity("Login.Models.EcomProducts", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("Category_Id")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnName("Product_Description")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("Product_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("ProductPrice")
                        .HasColumnName("Product_Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnName("Product_Type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ECom_Products");
                });

            modelBuilder.Entity("Login.Models.EcomCustomers", b =>
                {
                    b.HasOne("Login.Models.EcomLogin", "Login")
                        .WithMany("EcomCustomers")
                        .HasForeignKey("LoginId")
                        .HasConstraintName("FK_ECom_Customers_ECom_Login")
                        .IsRequired();
                });

            modelBuilder.Entity("Login.Models.EcomOrders", b =>
                {
                    b.HasOne("Login.Models.EcomCustomers", "Customer")
                        .WithMany("EcomOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ECom_Orders_ECom_Customers")
                        .IsRequired();

                    b.HasOne("Login.Models.EcomProducts", "Product")
                        .WithMany("EcomOrders")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ECom_Orders_ECom_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("Login.Models.EcomPayment", b =>
                {
                    b.HasOne("Login.Models.EcomCustomers", "Customer")
                        .WithMany("EcomPayment")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ECom_Payment_ECom_Customers")
                        .IsRequired();

                    b.HasOne("Login.Models.EcomOrders", "Order")
                        .WithMany("EcomPayment")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ECom_Payment_ECom_Orders")
                        .IsRequired();
                });

            modelBuilder.Entity("Login.Models.EcomProducts", b =>
                {
                    b.HasOne("Login.Models.EcomCategory", "Category")
                        .WithMany("EcomProducts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ECom_Products_ECom_Category")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
